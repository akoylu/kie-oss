# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
#  # Triggers the workflow on push or pull request events but only for the "main" branch
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to recursively checkout submodules.
          submodules: true

      - name: Setup Java JDK
        uses: actions/setup-java@v3.14.1
        with:
          # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
          java-version: 17 # optional
          # The path to the `.java-version` file. See examples of supported syntax in README file
          #java-version-file: # optional
          # Java distribution. See the list of supported distributions in README file
          distribution: temurin
          # The package type (jdk, jre, jdk+fx, jre+fx)
          #java-package: # optional, default is jdk
          # The architecture of the package (defaults to the action runner's architecture)
          architecture: x64 # optional
          # Path to where the compressed JDK is located
          #jdkFile: # optional
          # Set this option if you want the action to check for the latest available version that satisfies the version spec
          #check-latest: # optional
          # ID of the distributionManagement repository in the pom.xml file. Default is `github`
          #server-id: # optional, default is github
          # Environment variable name for the username for authentication to the Apache Maven repository. Default is $GITHUB_ACTOR
          #server-username: # optional, default is GITHUB_ACTOR
          # Environment variable name for password or token for authentication to the Apache Maven repository. Default is $GITHUB_TOKEN
          #server-password: # optional, default is GITHUB_TOKEN
          # Path to where the settings.xml file will be written. Default is ~/.m2.
          #settings-path: # optional
          # Overwrite the settings.xml file if it exists. Default is "true".
          #overwrite-settings: # optional, default is true
          # GPG private key to import. Default is empty string.
          #gpg-private-key: # optional
          # Environment variable name for the GPG private key passphrase. Default is $GPG_PASSPHRASE.
          #gpg-passphrase: # optional
          # Name of the build platform to cache dependencies. It can be "maven", "gradle" or "sbt".
          #cache: # optional
          # Workaround to pass job status to post job step. This variable is not intended for manual setting
          #job-status: # optional, default is ${{ job.status }}
          # The token used to authenticate when fetching version manifests hosted on github.com, such as for the Microsoft Build of OpenJDK. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
          #token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
          # Name of Maven Toolchain ID if the default name of "${distribution}_${java-version}" is not wanted. See examples of supported syntax in Advanced Usage file
          #mvn-toolchain-id: # optional
          # Name of Maven Toolchain Vendor if the default name of "${distribution}" is not wanted. See examples of supported syntax in Advanced Usage file
          #mvn-toolchain-vendor: # optional
      - name: Print maven version
        run: mvn --version

      - name: Configure Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOL
          <settings>
            <servers>
              <server>
                <id>repsy</id>
                <username>akoylu</username>
                <password>${{ secrets.REPSY_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOL

      - name: Upload settings.xml
        uses: actions/upload-artifact@v4
        with:
          name: maven-settings
          path: ~/.m2/settings.xml

      - name: Build droolsjbpm-build-bootstrap
        run: |
          cd droolsjbpm-build-bootstrap
          mvn -U versions:set -DnewVersion=7.67.2.Final-gt-${{ github.run_number }} -DprocessAllModules
          mvn clean install -DskipTests -DskipITs -Dnone -nsu

      - name: Build kie-soup
        run: |
          cd kie-soup
          mvn -U versions:set -DnewVersion=7.67.2.Final-gt-${{ github.run_number }} -DprocessAllModules
          mvn clean package -DskipTests -DskipITs -Dnone -nsu

#      - name: Set version
#        run: mvn -U versions:set -DnewVersion=7.67.2.Final-gt-${{ github.run_number }} -DprocessAllModules

#      - name: Build
#        run: mvn clean package -DskipTests -DskipITs -Dfull -nsu

#      - name: Deploy
#        run: mvn deploy -DaltDeploymentRepository=repsy::default::https://repo.repsy.io/mvn/akoylu/maven/
